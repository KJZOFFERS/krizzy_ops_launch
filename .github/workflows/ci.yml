name: KRIZZY OPS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-format:
    name: Code Quality (Lint & Format)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Ruff linting
      run: |
        ruff check . --output-format=github
    
    - name: Check Black formatting
      run: |
        black --check --diff .
    
    - name: Run Ruff formatting check
      run: |
        ruff format --check .

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run pytest
      env:
        # Mock environment variables for testing
        AIRTABLE_API_KEY: test_key
        AIRTABLE_BASE_ID: test_base
        DISCORD_WEBHOOK_OPS: https://discord.com/api/webhooks/test/ops
        DISCORD_WEBHOOK_ERRORS: https://discord.com/api/webhooks/test/errors
        TWILIO_ACCOUNT_SID: test_sid
        TWILIO_AUTH_TOKEN: test_token
        TWILIO_MESSAGING_SERVICE_SID: test_service_sid
        NAICS_WHITELIST: 541511,541512,541519
        UEI: TEST_UEI
        CAGE_CODE: TEST_CAGE
      run: |
        pytest -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run Safety check for vulnerabilities
      run: |
        safety check --json || true
    
    - name: Run Bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build-and-test-docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t krizzy-ops:test .
    
    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d --name krizzy-test -p 8080:8080 \
          -e AIRTABLE_API_KEY=test_key \
          -e AIRTABLE_BASE_ID=test_base \
          -e DISCORD_WEBHOOK_OPS=https://discord.com/test \
          -e DISCORD_WEBHOOK_ERRORS=https://discord.com/test \
          krizzy-ops:test
        
        # Wait for startup
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        
        # Cleanup
        docker stop krizzy-test
        docker rm krizzy-test

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      env:
        # Use test/staging credentials for integration tests
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY_TEST }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID_TEST }}
        DISCORD_WEBHOOK_OPS: ${{ secrets.DISCORD_WEBHOOK_OPS_TEST }}
        DISCORD_WEBHOOK_ERRORS: ${{ secrets.DISCORD_WEBHOOK_ERRORS_TEST }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID_TEST }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN_TEST }}
        TWILIO_MESSAGING_SERVICE_SID: ${{ secrets.TWILIO_MESSAGING_SERVICE_SID_TEST }}
        NAICS_WHITELIST: 541511,541512,541519
        UEI: ${{ secrets.UEI_TEST }}
        CAGE_CODE: ${{ secrets.CAGE_CODE_TEST }}
      run: |
        # Run smoke tests against test environment
        python tools/smoke.py

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: Railway, Heroku, or other platform deployment
    
    - name: Run staging smoke tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        # Wait for deployment
        sleep 30
        
        # Test staging health endpoint
        curl -f $STAGING_URL/health
        
        echo "‚úÖ Staging deployment successful"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment commands here
        # Example: Railway, Heroku, or other platform deployment
    
    - name: Run production smoke tests
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
      run: |
        # Wait for deployment
        sleep 30
        
        # Test production health endpoint
        curl -f $PRODUCTION_URL/health
        
        echo "‚úÖ Production deployment successful"
    
    - name: Notify success
      if: success()
      run: |
        echo "üéâ KRIZZY OPS successfully deployed to production!"

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-test-docker]
    if: failure()
    
    steps:
    - name: Notify team of failure
      run: |
        echo "‚ùå CI/CD Pipeline failed. Check the logs for details."
        # Add notification logic here (Slack, Discord, etc.)