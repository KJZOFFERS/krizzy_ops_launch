[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "krizzy-ops"
version = "3.0.0"
description = "KRIZZY OPS v3 Enterprise Engine - Production-ready REI and GovCon automation system"
authors = [{name = "KRIZZY OPS Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "flask==3.0.0",
    "gunicorn==21.2.0",
    "pyairtable==2.3.3",
    "requests==2.31.0",
    "twilio==8.10.3",
    "backoff==2.2.1",
    "python-dotenv==1.0.0",
    "feedparser==6.0.10",
    "xmltodict==0.13.0",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-mock==3.12.0",
    "pytest-cov==4.1.0",
    "ruff==0.1.6",
    "black==23.11.0",
    "safety==2.3.5",
    "bandit==1.7.5",
]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.black]
target-version = ['py311']
line-length = 100
skip-string-normalization = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    ".",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "test_*.py",
    "tools/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]