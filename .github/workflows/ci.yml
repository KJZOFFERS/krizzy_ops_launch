name: KRIZZY OPS CI/CD Pipeline

on:
  push:
    branches: [ main, develop, cursor/productionize-krizzy-ops-system-1321 ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with ruff
      run: |
        ruff check . --output-format=github
    
    - name: Format check with black
      run: |
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy --ignore-missing-imports .
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment variables
      run: |
        echo "AIRTABLE_API_KEY=test_key" >> $GITHUB_ENV
        echo "AIRTABLE_BASE_ID=test_base" >> $GITHUB_ENV
        echo "DISCORD_WEBHOOK_OPS=https://discord.com/api/webhooks/test" >> $GITHUB_ENV
        echo "DISCORD_WEBHOOK_ERRORS=https://discord.com/api/webhooks/test" >> $GITHUB_ENV
        echo "TWILIO_ACCOUNT_SID=test_sid" >> $GITHUB_ENV
        echo "TWILIO_AUTH_TOKEN=test_token" >> $GITHUB_ENV
        echo "TWILIO_MESSAGING_SERVICE_SID=test_service" >> $GITHUB_ENV
        echo "TWILIO_SAFE_MODE=true" >> $GITHUB_ENV
        echo "SAM_SEARCH_API=https://api.sam.gov/v1/search" >> $GITHUB_ENV
        echo "SAM_API_KEY=test_key" >> $GITHUB_ENV
        echo "NAICS_WHITELIST=541511,541512,541519" >> $GITHUB_ENV
        echo "UEI=TEST123456789" >> $GITHUB_ENV
        echo "CAGE_CODE=TEST1" >> $GITHUB_ENV
        echo "FPDS_ATOM_FEED=https://www.fpds.gov/fpdsng_cms/index.php/reports" >> $GITHUB_ENV
        echo "PORT=8080" >> $GITHUB_ENV
    
    - name: Run integration tests
      run: |
        python -m pytest test_*.py -v --tb=short
    
    - name: Test health endpoint
      run: |
        python main.py &
        sleep 5
        curl -f http://localhost:8080/health || exit 1
        pkill -f "python main.py"

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Build Docker image
      run: |
        docker build -t krizzy-ops:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name krizzy-ops-test -p 8080:8080 \
          -e AIRTABLE_API_KEY=test \
          -e AIRTABLE_BASE_ID=test \
          -e TWILIO_SAFE_MODE=true \
          krizzy-ops:latest
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop krizzy-ops-test
    
    - name: Push to registry
      if: github.event_name == 'push'
      run: |
        echo "Docker image built successfully"
        # Add registry push logic here if needed

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add deployment logic here